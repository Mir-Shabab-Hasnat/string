generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id
  username       String         @unique
  email          String         @unique
  firstName      String
  lastName       String
  birthDate      DateTime
  organisation   String?
  role           UserRole
  isActive       Boolean        @default(true)
  profilePicture String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Comment        Comment[]
  messages       Message[]      @relation("Messages")
  Post           Post[]
  following      Follow[]       @relation("following")
  followers      Follow[]       @relation("followers")
  conversations  Conversation[] @relation("ConversationParticipants")
}

model Conversation {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[] @relation("ConversationMessages")
  participants User[]    @relation("ConversationParticipants")
}

model Message {
  id             String       @id @default(uuid())
  senderId       String
  conversationId String
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  sender         User         @relation("Messages", fields: [senderId], references: [id])
}

model Post {
  id        String    @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  likes     Int       @default(0)
  tags      String[]  @default([])
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("following", fields: [followerId], references: [id])
  following   User     @relation("followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

enum UserRole {
  STUDENT
  PROFESSIONAL
  ACADEMIC
}
