generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                            String               @id
  username                                      String               @unique
  email                                         String               @unique
  firstName                                     String
  lastName                                      String
  birthDate                                     DateTime
  organisation                                  String?
  role                                          UserRole
  isActive                                      Boolean              @default(true)
  profilePicture                                String?
  createdAt                                     DateTime             @default(now())
  updatedAt                                     DateTime             @updatedAt
  cart                                          Cart?
  Comment                                       Comment[]
  FriendRequest_FriendRequest_recipientIdToUser FriendRequest[]      @relation("FriendRequest_recipientIdToUser")
  FriendRequest_FriendRequest_senderIdToUser    FriendRequest[]      @relation("FriendRequest_senderIdToUser")
  marketplaceItems                              MarketplaceItem[]
  messages                                      Message[]            @relation("Messages")
  Notification                                  Notification[]
  Post                                          Post[]
  feedPreferences                               UserFeedPreferences?
  conversations                                 Conversation[]       @relation("ConversationParticipants")


  marketplaceItems MarketplaceItem[]
  cart             Cart?
  PostAuthenticity PostAuthenticity[]

}

model Conversation {
  id           String    @id @unique @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[] @relation("ConversationMessages")
  participants User[]    @relation("ConversationParticipants")

  @@index([id])
}

model Message {
  id             String       @id @default(uuid())
  senderId       String
  conversationId String
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  sender         User         @relation("Messages", fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
}

model Post {
  id           String             @id @default(uuid())
  content      String
  imageUrl     String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  userId       String
  likes        Int                @default(0)
  tags         String[]
  comments     Comment[]
  user         User               @relation(fields: [userId], references: [id])
  authenticity PostAuthenticity[]
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model PostAuthenticity {
  id          String   @id @default(uuid())
  postId      String
  userId      String
  isAuthentic Boolean
  createdAt   DateTime @default(now())
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model FriendRequest {
  id                                   String         @id
  senderId                             String
  recipientId                          String
  status                               String         @default("PENDING")
  createdAt                            DateTime       @default(now())
  updatedAt                            DateTime
  User_FriendRequest_recipientIdToUser User           @relation("FriendRequest_recipientIdToUser", fields: [recipientId], references: [id])
  User_FriendRequest_senderIdToUser    User           @relation("FriendRequest_senderIdToUser", fields: [senderId], references: [id])
  Notification                         Notification[]

  @@index([recipientId])
  @@index([senderId])
}

model Notification {
  id            String         @id
  userId        String
  type          String
  title         String
  content       String
  relatedId     String?
  createdAt     DateTime       @default(now())
  read          Boolean        @default(false)
  FriendRequest FriendRequest? @relation(fields: [relatedId], references: [id])
  User          User           @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([relatedId])
}

model UserFeedPreferences {
  id               String   @id @default(uuid())
  userId           String   @unique
  tags             String[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  showOtherContent Boolean  @default(false)
  user             User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model MarketplaceItem {
  id          String       @id @default(uuid())
  title       String
  description String
  price       Float
  category    ItemCategory
  condition   String?
  location    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  sellerId    String
  sold        Boolean      @default(false)
  clickCount  Int          @default(0)
  views       Int          @default(0)
  CartItem    CartItem[]

  views       Int          @default(0)
  clickCount  Int          @default(0)

  seller      User         @relation(fields: [sellerId], references: [id])


  @@index([sellerId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id              String          @id @default(uuid())
  cartId          String
  itemId          String
  quantity        Int             @default(1)
  createdAt       DateTime        @default(now())
  cart            Cart            @relation(fields: [cartId], references: [id])
  marketplaceItem MarketplaceItem @relation(fields: [itemId], references: [id])

  @@unique([cartId, itemId])
}

enum UserRole {
  STUDENT
  PROFESSIONAL
  ACADEMIC
}

enum ItemCategory {
  TICKETS
  BOOKS
  MAGAZINES
  MERCHANDISE
  OTHER
}
