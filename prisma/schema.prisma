generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                            String          @id
  username                                      String          @unique
  email                                         String          @unique
  firstName                                     String
  lastName                                      String
  birthDate                                     DateTime
  organisation                                  String?
  role                                          UserRole
  isActive                                      Boolean         @default(true)
  profilePicture                                String?
  createdAt                                     DateTime        @default(now())
  updatedAt                                     DateTime        @updatedAt
  Comment                                       Comment[]
  FriendRequest_FriendRequest_recipientIdToUser FriendRequest[] @relation("FriendRequest_recipientIdToUser")
  FriendRequest_FriendRequest_senderIdToUser    FriendRequest[] @relation("FriendRequest_senderIdToUser")
  messages                                      Message[]       @relation("Messages")
  Notification                                  Notification[]
  Post                                          Post[]
  conversations                                 Conversation[]  @relation("ConversationParticipants")
}

model Conversation {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  messages     Message[] @relation("ConversationMessages")
  participants User[]    @relation("ConversationParticipants")
}

model Message {
  id             String       @id @default(uuid())
  senderId       String
  conversationId String
  content        String
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  sender         User         @relation("Messages", fields: [senderId], references: [id])
}

model Post {
  id        String    @id @default(uuid())
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  likes     Int       @default(0)
  tags      String[]  @default([])
  comments  Comment[]
  user      User      @relation(fields: [userId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model FriendRequest {
  id                                   String         @id
  senderId                             String
  recipientId                          String
  status                               String         @default("PENDING")
  createdAt                            DateTime       @default(now())
  updatedAt                            DateTime
  User_FriendRequest_recipientIdToUser User           @relation("FriendRequest_recipientIdToUser", fields: [recipientId], references: [id])
  User_FriendRequest_senderIdToUser    User           @relation("FriendRequest_senderIdToUser", fields: [senderId], references: [id])
  Notification                         Notification[]

  @@index([recipientId])
  @@index([senderId])
}

model Notification {
  id            String         @id
  userId        String
  type          String
  title         String
  content       String
  relatedId     String?
  createdAt     DateTime       @default(now())
  read          Boolean        @default(false)
  FriendRequest FriendRequest? @relation(fields: [relatedId], references: [id])
  User          User           @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum UserRole {
  STUDENT
  PROFESSIONAL
  ACADEMIC
}
