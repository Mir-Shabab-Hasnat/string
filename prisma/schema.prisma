// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id
  username       String         @unique
  email          String         @unique
  firstName      String
  lastName       String
  birthDate      DateTime
  organisation   String?
  role           UserRole
  isActive       Boolean        @default(true)
  profilePicture String? // URL to the user's profile picture
  messages       Message[]      @relation("Messages")
  conversations  Conversation[] @relation("ConversationParticipants")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Post           Post[]
  Comment        Comment[]
}

enum UserRole {
  STUDENT
  PROFESSIONAL
  ACADEMIC
}

model Conversation {
  id           String    @id @default(uuid())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[] @relation("ConversationMessages")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Message {
  id             String       @id @default(uuid())
  senderId       String
  sender         User         @relation("Messages", fields: [senderId], references: [id])
  conversationId String
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  content        String
  createdAt      DateTime     @default(now())
}

model Post {
  id        String    @id @default(uuid())
  content   String // Text content of the post
  imageUrl  String? // Optional image attached to the post
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String // Foreign key reference to User
  likes     Int       @default(0) // Number of likes
  comments  Comment[] // One-to-many relationship with comments
  tags      String[]  @default([]) 
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
